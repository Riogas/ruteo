"""
Limpieza de pol√≠gonos peque√±os/basura en ZONAS_F.geojson
Elimina pol√≠gonos menores a un umbral de √°rea para cada zona.
"""

import json
from shapely.geometry import shape, mapping

def clean_small_polygons(input_file, output_file, min_area_km2=0.1):
    """
    Elimina pol√≠gonos muy peque√±os (probablemente errores/basura)
    
    Args:
        min_area_km2: √Årea m√≠nima en km¬≤ para conservar un pol√≠gono
                     (0.1 km¬≤ = 100,000 m¬≤ = 10 hect√°reas)
    """
    print(f"üìñ Leyendo {input_file}...")
    
    with open(input_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"‚úÖ Archivo cargado: {len(data['features'])} zonas\n")
    print(f"üßπ Limpiando pol√≠gonos menores a {min_area_km2} km¬≤...")
    print("="*70)
    
    total_removed = 0
    
    for feature in data['features']:
        codigo = feature['properties'].get('Codigo', '?')
        geom = feature['geometry']
        
        if geom['type'] != 'MultiPolygon':
            continue
        
        original_count = len(geom['coordinates'])
        
        # Filtrar pol√≠gonos
        cleaned_polygons = []
        removed_polygons = []
        
        for i, polygon in enumerate(geom['coordinates']):
            # Crear geometr√≠a de este pol√≠gono individual
            from shapely.geometry import Polygon, MultiPolygon
            
            # polygon es [[exterior], [hole1], [hole2], ...]
            exterior = polygon[0]
            holes = polygon[1:] if len(polygon) > 1 else []
            
            poly = Polygon(exterior, holes)
            
            # Calcular √°rea (en grados¬≤)
            area_deg2 = abs(poly.area)
            
            # Convertir a km¬≤ aproximado (1¬∞ ‚âà 111 km en el ecuador)
            # En Uruguay (lat ~-35¬∞): 1¬∞ lon ‚âà 91 km, 1¬∞ lat ‚âà 111 km
            area_km2 = area_deg2 * 91 * 111
            
            if area_km2 >= min_area_km2:
                cleaned_polygons.append(polygon)
            else:
                removed_polygons.append({
                    'index': i,
                    'area_km2': area_km2,
                    'points': len(exterior)
                })
        
        # Actualizar geometr√≠a
        if len(cleaned_polygons) != original_count:
            feature['geometry']['coordinates'] = cleaned_polygons
            removed_count = original_count - len(cleaned_polygons)
            total_removed += removed_count
            
            print(f"\nüì¶ Zona {codigo}:")
            print(f"   Pol√≠gonos originales: {original_count}")
            print(f"   Pol√≠gonos conservados: {len(cleaned_polygons)}")
            print(f"   Pol√≠gonos eliminados: {removed_count}")
            
            for removed in removed_polygons:
                print(f"      ‚úó Pol√≠gono {removed['index']+1}: {removed['area_km2']:.6f} km¬≤ ({removed['points']} puntos)")
    
    print("\n" + "="*70)
    print(f"üíæ Guardando en {output_file}...")
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=None)
    
    print(f"\n‚úÖ ¬°Completado!")
    print(f"   Total de pol√≠gonos peque√±os eliminados: {total_removed}")
    
    return total_removed

if __name__ == "__main__":
    print("="*70)
    print("üßπ LIMPIADOR DE POL√çGONOS PEQUE√ëOS/BASURA")
    print("="*70)
    print()
    
    # Limpiar ZONAS_F
    removed = clean_small_polygons(
        'app/data/ZONAS_F.geojson',
        'app/data/ZONAS_F_clean.geojson',
        min_area_km2=0.1  # Eliminar pol√≠gonos menores a 0.1 km¬≤
    )
    
    print("\n" + "="*70)
    print("‚úÖ PROCESO COMPLETADO")
    print("="*70)
    print(f"\n   Archivo limpio: app/data/ZONAS_F_clean.geojson")
    print(f"   Pol√≠gonos basura eliminados: {removed}")
    print()
    print("   Para aplicar los cambios:")
    print("   copy app\\data\\ZONAS_F.geojson app\\data\\ZONAS_F_before_clean.geojson")
    print("   copy app\\data\\ZONAS_F_clean.geojson app\\data\\ZONAS_F.geojson")
    print()
