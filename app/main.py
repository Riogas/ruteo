"""
API REST para Sistema de Ruteo Inteligente.

FastAPI application que expone endpoints para:
- Asignaci√≥n de pedidos a veh√≠culos
- Optimizaci√≥n de rutas
- Geocodificaci√≥n y geocodificaci√≥n inversa
- Health checks

ENDPOINTS PRINCIPALES:
- POST /api/v1/assign-order: Asignar pedido a mejor veh√≠culo
- POST /api/v1/assign-orders-batch: Asignar m√∫ltiples pedidos (modo batch)
- POST /api/v1/optimize-route: Optimizar ruta de veh√≠culo
- POST /api/v1/geocode: Geocodificar direcci√≥n (direcci√≥n ‚Üí coordenadas)
- POST /api/v1/reverse-geocode: Geocodificaci√≥n inversa (coordenadas ‚Üí direcci√≥n)
- GET /health: Health check

ARQUITECTURA:
FastAPI + Pydantic + Servicios de backend
"""

import os
import sys
from datetime import datetime
from typing import List, Optional

from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from loguru import logger
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Importar modelos y servicios
from app.models import (
    AssignmentRequest,
    AssignmentResult,
    BatchAssignmentRequest,
    BatchAssignmentResponse,
    BatchAssignmentResult,
    HealthCheckResponse,
    Order,
    Vehicle,
    SystemConfig,
    Address,
    Coordinates,
    StreetsRequest,
    StreetsResponse
)
from app.geocoding import get_geocoding_service
from app.utils import lat_lon_to_utm
from app.routing import RouteCalculator
from app.scoring import ScoringEngine
from app.optimizer import RouteOptimizer, ClusteringOptimizer


# ============================================================================
# CONFIGURACI√ìN DE LA APLICACI√ìN
# ============================================================================

# Configurar logging
logger.remove()  # Remover handler por defecto
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>",
    level="INFO"
)
logger.add(
    "logs/api.log",
    rotation="1 day",
    retention="7 days",
    level="DEBUG"
)

# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="Sistema de Ruteo Inteligente",
    description="""
    API REST para asignaci√≥n inteligente de pedidos a veh√≠culos.
    
    ## Caracter√≠sticas
    
    * **Geocodificaci√≥n bidireccional**: Direcci√≥n ‚Üî Coordenadas
    * **Ruteo avanzado**: Usa red vial real con calles flechadas
    * **Scoring multi-criterio**: Eval√∫a m√∫ltiples factores
    * **Optimizaci√≥n con IA**: Algoritmos avanzados (OR-Tools)
    * **Capacidad din√°mica**: Configurable por veh√≠culo
    * **Priorizaci√≥n temporal**: Respeta deadlines
    * **Modo batch ultra-r√°pido**: Optimizado para procesar m√∫ltiples pedidos
    
    ## Flujo t√≠pico
    
    1. Cliente ingresa direcci√≥n
    2. Sistema geocodifica la direcci√≥n
    3. Se eval√∫an todos los veh√≠culos disponibles
    4. Se asigna al veh√≠culo √≥ptimo
    5. Se optimiza la secuencia de entregas
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================================================================
# INICIALIZACI√ìN DE SERVICIOS
# ============================================================================

# Servicios globales (singleton pattern)
geocoding_service = None
route_calculator = None
scoring_engine = None
route_optimizer = None
clustering_optimizer = None


@app.on_event("startup")
async def startup_event():
    """
    Inicializa servicios al arrancar la aplicaci√≥n.
    
    IMPORTANTE:
    Los servicios se inicializan una sola vez y se reutilizan
    para todas las requests, mejorando performance.
    """
    global geocoding_service, route_calculator, scoring_engine
    global route_optimizer, clustering_optimizer
    
    logger.info("üöÄ Iniciando Sistema de Ruteo Inteligente...")
    
    try:
        # Inicializar servicios
        logger.info("Inicializando servicios...")
        
        geocoding_service = get_geocoding_service()
        route_calculator = RouteCalculator()
        
        # OPTIMIZACI√ìN: Pre-cargar grafo grande de Montevideo (DESACTIVADO)
        # Descomentar las siguientes l√≠neas para activar (toma 20-30s al inicio)
        # try:
        #     logger.info("üó∫Ô∏è  Pre-cargando grafo grande de Montevideo...")
        #     preload_success = route_calculator.preload_montevideo_graph()
        #     if preload_success:
        #         logger.info("‚úÖ Grafo de Montevideo pre-cargado (mejora 10% rendimiento)")
        #     else:
        #         logger.warning("‚ö†Ô∏è  No se pudo pre-cargar grafo (modo tradicional)")
        # except Exception as e:
        #     logger.warning(f"‚ö†Ô∏è  Error pre-cargando grafo: {e} (usando modo tradicional)")
        
        # Configuraci√≥n por defecto
        default_config = SystemConfig()
        
        scoring_engine = ScoringEngine(default_config, route_calculator)
        route_optimizer = RouteOptimizer(route_calculator, default_config)
        clustering_optimizer = ClusteringOptimizer()
        
        logger.info("‚úì Todos los servicios inicializados correctamente")
        logger.info("üéØ API lista para recibir requests")
        
    except Exception as e:
        logger.error(f"‚ùå Error inicializando servicios: {e}")
        raise


@app.on_event("shutdown")
async def shutdown_event():
    """Limpieza al cerrar la aplicaci√≥n"""
    logger.info("üëã Cerrando Sistema de Ruteo Inteligente...")


# ============================================================================
# ENDPOINTS
# ============================================================================

@app.get(
    "/",
    summary="Root endpoint",
    response_description="Informaci√≥n b√°sica de la API"
)
async def root():
    """Endpoint ra√≠z con informaci√≥n de la API"""
    return {
        "name": "Sistema de Ruteo Inteligente",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs",
        "health": "/health"
    }


@app.get(
    "/health",
    response_model=HealthCheckResponse,
    summary="Health check",
    response_description="Estado de salud de la API"
)
async def health_check():
    """
    Verifica el estado de salud de la API y sus servicios.
    
    Returns:
        Estado de la API y sus componentes
    """
    return HealthCheckResponse(
        status="healthy",
        version="1.0.0",
        timestamp=datetime.now()
    )


@app.post(
    "/api/v1/assign-order",
    response_model=AssignmentResult,
    summary="Asignar pedido a veh√≠culo",
    response_description="Resultado de la asignaci√≥n con veh√≠culo √≥ptimo",
    status_code=status.HTTP_200_OK
)
async def assign_order(request: AssignmentRequest) -> AssignmentResult:
    """
    **ENDPOINT PRINCIPAL**: Asigna un pedido al veh√≠culo √≥ptimo.
    
    ## Proceso
    
    1. **Geocodificaci√≥n**: Si la direcci√≥n no tiene coordenadas, se geocodifica
    2. **Evaluaci√≥n**: Se eval√∫an todos los veh√≠culos disponibles
    3. **Scoring**: Cada veh√≠culo recibe un score multi-criterio
    4. **Selecci√≥n**: Se selecciona el veh√≠culo con mejor score
    5. **Optimizaci√≥n**: Se optimiza la secuencia de entregas
    6. **Respuesta**: Se retorna el resultado con detalles
    
    ## Factores considerados
    
    - üó∫Ô∏è **Distancia**: Cercan√≠a al pedido
    - üì¶ **Capacidad**: Espacio disponible
    - ‚è∞ **Tiempo**: Urgencia y deadline
    - üõ£Ô∏è **Ruta**: Compatibilidad con entregas actuales
    - ‚≠ê **Desempe√±o**: Historial del conductor
    
    ## Ejemplo
    
    ```python
    {
        "order": {
            "id": "PED-001",
            "address": {"street": "Av. Corrientes 1234", "city": "Buenos Aires"},
            "deadline": "2025-10-22T18:00:00",
            "priority": "high"
        },
        "vehicles": [
            {
                "id": "MOV-001",
                "current_location": {"lat": -34.603722, "lon": -58.381592},
                "max_capacity": 6,
                "current_load": 3
            }
        ]
    }
    ```
    """
    try:
        logger.info(f"üì® Request de asignaci√≥n recibido: {request.order.id}")
        
        # 1. GEOCODIFICAR DIRECCI√ìN (si es necesario)
        order = request.order
        
        if not order.delivery_location and order.address:
            logger.info(f"üîç Geocodificando direcci√≥n: {order.address.full_address}")
            coords = geocoding_service.geocode(order.address)
            
            if not coords:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"No se pudo geocodificar la direcci√≥n: {order.address.full_address}"
                )
            
            order.delivery_location = coords
            logger.info(f"‚úì Direcci√≥n geocodificada: {coords}")
        
        if not order.delivery_location:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="El pedido debe tener coordenadas de entrega o direcci√≥n"
            )
        
        # 2. VALIDAR VEH√çCULOS
        if not request.vehicles or len(request.vehicles) == 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No se proporcionaron veh√≠culos disponibles"
            )
        
        # Actualizar config del scoring engine
        if request.config:
            scoring_engine.config = request.config
        
        # 3. ENCONTRAR MEJOR VEH√çCULO
        logger.info(f"üîç Evaluando {len(request.vehicles)} veh√≠culos...")
        
        result = scoring_engine.find_best_vehicle(
            request.vehicles,
            order,
            min_score_threshold=0.2  # Score m√≠nimo aceptable
        )
        
        if not result:
            # No hay veh√≠culos disponibles o adecuados
            logger.warning(f"‚ö†Ô∏è  No se encontr√≥ veh√≠culo adecuado para {order.id}")
            
            return AssignmentResult(
                order_id=order.id,
                assigned_vehicle_id=None,
                confidence_score=0.0,
                message="No hay veh√≠culos disponibles o adecuados para este pedido",
                warnings=[
                    "Considera aumentar la capacidad de los veh√≠culos",
                    "Verifica que los veh√≠culos est√©n disponibles",
                    "El pedido puede ser demasiado urgente o lejano"
                ]
            )
        
        best_vehicle, best_score = result
        
        logger.info(
            f"‚úì Veh√≠culo seleccionado: {best_vehicle.id} "
            f"(score: {best_score.total_score:.3f})"
        )
        
        # 4. CALCULAR RUTA (opcional, puede ser costoso)
        route = None
        estimated_delivery_time = best_score.estimated_arrival_time
        
        # 5. PREPARAR RESPUESTA
        # Obtener top 3 alternativas
        all_ranked = scoring_engine.rank_vehicles(request.vehicles, order)
        alternatives = [
            {
                "vehicle_id": v.id,
                "score": s.total_score,
                "distance_km": s.distance_to_delivery_km
            }
            for v, s in all_ranked[1:4]  # Top 2-4
        ]
        
        result = AssignmentResult(
            order_id=order.id,
            assigned_vehicle_id=best_vehicle.id,
            confidence_score=best_score.total_score,
            score_details=best_score,
            estimated_delivery_time=estimated_delivery_time,
            route=route,
            alternatives=alternatives,
            message=f"Pedido asignado exitosamente a {best_vehicle.id}",
            warnings=[
                w for w in [
                    "Veh√≠culo llegar√° tarde" if not best_score.will_arrive_on_time else None,
                    f"Capacidad limitada ({best_score.available_capacity} espacios)" if best_score.available_capacity <= 1 else None
                ] if w
            ]
        )
        
        logger.info(f"‚úÖ Asignaci√≥n completada exitosamente: {order.id} -> {best_vehicle.id}")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error en assign_order: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error interno del servidor: {str(e)}"
        )


@app.post(
    "/api/v1/geocode",
    summary="Geocodificar direcci√≥n (soporta esquinas)",
    response_description="Coordenadas de la direcci√≥n"
)
async def geocode_address(address: Address) -> Coordinates:
    """
    Convierte una direcci√≥n de texto a coordenadas geogr√°ficas.
    
    **Soporta m√∫ltiples formatos de direcci√≥n:**
    
    ## Formato 1: Con n√∫mero de puerta
    
    ```json
    {
        "street": "Av. 18 de Julio 1234",
        "city": "Montevideo",
        "country": "Uruguay"
    }
    ```
    
    ## Formato 2: Con esquinas (sin n√∫mero de puerta)
    
    ```json
    {
        "street": "Av. 18 de Julio",
        "corner_1": "R√≠o Negro",
        "corner_2": "Ejido",
        "city": "Montevideo",
        "country": "Uruguay"
    }
    ```
    
    ## Formato 3: Combinado
    
    ```json
    {
        "street": "Av. 18 de Julio 1234",
        "corner_1": "Ejido",
        "city": "Montevideo",
        "country": "Uruguay"
    }
    ```
    
    **Ventajas de usar esquinas:**
    - ‚úÖ Mejora precisi√≥n cuando no hay n√∫mero de puerta
    - ‚úÖ √ötil para direcciones ambiguas o incompletas
    - ‚úÖ Permite geocodificar intersecciones
    - ‚úÖ Formato com√∫n en Uruguay y Argentina
    
    El sistema intentar√° autom√°ticamente m√∫ltiples formatos:
    1. "Calle N√∫mero, Ciudad"
    2. "Calle entre Esquina1 y Esquina2, Ciudad"
    3. "Calle esquina Esquina1, Ciudad"
    4. "Esquina1 y Esquina2, Ciudad"
    
    Args:
        address: Direcci√≥n estructurada (con campos opcionales corner_1 y corner_2)
        
    Returns:
        Coordenadas (latitud, longitud)
        
    Raises:
        404: No se encontraron coordenadas para la direcci√≥n
        500: Error del servicio de geocodificaci√≥n
    """
    try:
        logger.info(f"üîç Geocodificando: {address.full_address or address.street}")
        
        coords = geocoding_service.geocode(address)
        
        if not coords:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="No se pudieron encontrar coordenadas para esta direcci√≥n"
            )
        
        logger.info(f"‚úì Geocodificado: {coords}")
        return coords
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error en geocode: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@app.post(
    "/api/v1/reverse-geocode",
    summary="Geocodificaci√≥n inversa (coordenadas ‚Üí direcci√≥n + esquinas)",
    response_description="Direcci√≥n correspondiente a las coordenadas con esquinas"
)
async def reverse_geocode_coordinates(coordinates: Coordinates) -> Address:
    """
    Convierte coordenadas geogr√°ficas a una direcci√≥n de texto completa.
    
    **Geocodificaci√≥n inversa mejorada**: Obtiene el nombre de calle, n√∫mero de puerta
    **Y LAS DOS ESQUINAS M√ÅS CERCANAS** a partir de coordenadas GPS.
    
    **‚ú® NUEVO**: Incluye `corner_1` y `corner_2` con las esquinas m√°s cercanas,
    ideal para direcciones de Montevideo estilo "Calle X entre Esquina1 y Esquina2".
    
    ## Ejemplo de entrada
    
    ```json
    {
        "lat": -34.9011,
        "lon": -56.1645,
        "address": "Montevideo, Uruguay"
    }
    ```
    
    ## Respuesta esperada (CON ESQUINAS)
    
    ```json
    {
        "street": "18 de Julio 1234",
        "city": "Montevideo",
        "state": "Montevideo",
        "country": "Uruguay",
        "postal_code": "11200",
        "corner_1": "Ejido",
        "corner_2": "Y√≠",
        "full_address": "18 de Julio 1234, Montevideo, Uruguay"
    }
    ```
    
    **Nota**: `corner_1` y `corner_2` pueden ser `null` si no se encuentran esquinas cercanas.
    
    ## Casos de uso
    
    - Obtener direcci√≥n completa desde GPS del m√≥vil (con esquinas)
    - Convertir ubicaci√≥n actual del veh√≠culo en direcci√≥n legible
    - Validar coordenadas de entrega
    - Mostrar direcciones detalladas en reportes: "18 de Julio entre Ejido y Y√≠"
    - Tracking de m√≥viles con informaci√≥n precisa de ubicaci√≥n
    
    Args:
        coordinates: Coordenadas GPS (lat, lon) con direcci√≥n opcional
        
    Returns:
        Direcci√≥n completa (calle, n√∫mero, ciudad, pa√≠s, **esquinas**, etc.)
        
    Raises:
        404: No se encontr√≥ direcci√≥n para estas coordenadas
        500: Error del servicio de geocodificaci√≥n
    """
    try:
        logger.info(f"üîÑ Reverse geocoding: ({coordinates.lat}, {coordinates.lon})")
        
        # Enriquecer coordenadas con UTM si no las tiene
        if not coordinates.utm_x or not coordinates.utm_y:
            try:
                utm_x, utm_y, utm_zone = lat_lon_to_utm(coordinates.lat, coordinates.lon)
                coordinates.utm_x = utm_x
                coordinates.utm_y = utm_y
                coordinates.utm_zone = utm_zone
            except Exception as e:
                logger.warning(f"No se pudo calcular coordenadas UTM: {e}")
        
        address = geocoding_service.reverse_geocode(coordinates)
        
        if not address:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"No se encontr√≥ direcci√≥n para las coordenadas ({coordinates.lat}, {coordinates.lon})"
            )
        
        logger.info(f"‚úì Direcci√≥n encontrada: {address.full_address or address.street}")
        return address
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error en reverse geocoding: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@app.post(
    "/api/v1/streets",
    summary="Listar calles de un departamento/localidad en Uruguay",
    response_description="Lista de calles √∫nicas ordenadas alfab√©ticamente",
    response_model=StreetsResponse
)
async def get_streets(request: StreetsRequest) -> StreetsResponse:
    """
    Obtiene el listado completo de calles de un departamento o localidad en Uruguay.
    
    **Caracter√≠sticas:**
    - Pa√≠s fijo: Uruguay
    - Sin duplicados (nombres √∫nicos)
    - Ordenado alfab√©ticamente
    - Soporta b√∫squeda por departamento completo o localidad espec√≠fica
    
    ## Ejemplo 1: Todo el departamento
    
    ```json
    {
        "departamento": "Montevideo"
    }
    ```
    
    **Respuesta**: Todas las calles de Montevideo (puede tardar 30-60 segundos)
    
    ## Ejemplo 2: Localidad espec√≠fica
    
    ```json
    {
        "departamento": "Canelones",
        "localidad": "Ciudad de la Costa"
    }
    ```
    
    **Respuesta**: Solo calles de Ciudad de la Costa (m√°s r√°pido, 10-20 segundos)
    
    ## Departamentos v√°lidos de Uruguay
    
    - Montevideo
    - Canelones
    - Maldonado
    - Colonia
    - Rocha
    - Salto
    - Paysand√∫
    - Rivera
    - Tacuaremb√≥
    - Artigas
    - Cerro Largo
    - Treinta y Tres
    - Lavalleja
    - Durazno
    - Flores
    - Florida
    - R√≠o Negro
    - Soriano
    - San Jos√©
    
    **Nota**: La primera consulta puede tardar debido a la cantidad de datos.
    Se recomienda usar localidades espec√≠ficas para consultas m√°s r√°pidas.
    
    Args:
        request: Departamento y localidad opcional
        
    Returns:
        Lista de calles √∫nicas ordenadas alfab√©ticamente
        
    Raises:
        404: No se encontraron calles para el √°rea especificada
        500: Error consultando la base de datos de OpenStreetMap
        504: Timeout (consulta tom√≥ m√°s de 60 segundos)
    """
    try:
        logger.info(f"üó∫Ô∏è  Listando calles: {request.departamento}" + 
                   (f", {request.localidad}" if request.localidad else ""))
        
        # Obtener calles del servicio de geocodificaci√≥n
        calles = geocoding_service.get_streets_by_location(
            departamento=request.departamento,
            localidad=request.localidad,
            timeout=60
        )
        
        if not calles:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"No se encontraron calles para {request.departamento}" +
                       (f", {request.localidad}" if request.localidad else "")
            )
        
        response = StreetsResponse(
            departamento=request.departamento,
            localidad=request.localidad,
            total_calles=len(calles),
            calles=calles
        )
        
        logger.info(f"‚úÖ Retornando {len(calles)} calles de {request.departamento}" +
                   (f", {request.localidad}" if request.localidad else ""))
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error listando calles: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@app.get(
    "/api/v1/stats",
    summary="Estad√≠sticas del sistema",
    response_description="Estad√≠sticas de uso"
)
async def get_stats():
    """
    Obtiene estad√≠sticas del sistema.
    
    √ötil para monitoreo y debugging.
    """
    try:
        geocoding_stats = geocoding_service.get_cache_stats()
        
        return {
            "geocoding": geocoding_stats,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Error obteniendo stats: {e}")
        return {"error": str(e)}


# ============================================================================
# MANEJO DE ERRORES
# ============================================================================

@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Manejo personalizado de excepciones HTTP"""
    logger.error(f"HTTP Error: {exc.status_code} - {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now().isoformat()
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """Manejo de excepciones generales"""
    logger.error(f"Unhandled error: {exc}", exc_info=True)
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "Error interno del servidor",
            "detail": str(exc),
            "timestamp": datetime.now().isoformat()
        }
    )


# ============================================================================
# PUNTO DE ENTRADA
# ============================================================================



@app.post(
    "/api/v1/assign-orders-batch",
    response_model=BatchAssignmentResponse,
    summary="Asignar m√∫ltiples pedidos a veh√≠culos (Batch)",
    response_description="Resultados de asignaci√≥n de todos los pedidos",
    status_code=status.HTTP_200_OK
)
async def assign_orders_batch(request: BatchAssignmentRequest) -> BatchAssignmentResponse:
    """
    **ENDPOINT BATCH**: Asigna m√∫ltiples pedidos a veh√≠culos de forma optimizada.
    
    ## Ventajas sobre llamadas individuales
    
    - ‚ö° **M√°s r√°pido**: Modo fast con pre-filtering (70-80% m√°s r√°pido)
    - üìä **Optimizaci√≥n global**: Asigna considerando toda la flota
    - üíæ **Cache eficiente**: Reutiliza c√°lculos de rutas entre pedidos
    - üéØ **Mejor uso de recursos**: Distribuye carga entre veh√≠culos
    
    ## Modo Fast (recomendado)
    
    Cuando `fast_mode=true`:
    1. Pre-filtra veh√≠culos por capacidad/peso
    2. Calcula distancias euclideas (r√°pido)
    3. Selecciona top-N candidatos por pedido
    4. Solo para top-N: calcula rutas reales
    
    **Resultado**: 3-5 segundos para 10 pedidos (vs 30-50 segundos en modo normal)
    
    ## Ejemplo
    
    ```json
    {
        "orders": [
            {"id": "ORD-001", "delivery_location": {...}, ...},
            {"id": "ORD-002", "delivery_location": {...}, ...}
        ],
        "vehicles": [...],
        "fast_mode": true,
        "max_candidates_per_order": 3
    }
    ```
    
    ## Response
    
    ```json
    {
        "total_orders": 5,
        "assigned": 4,
        "unassigned": 1,
        "total_time": 2.34,
        "assignments": [...]
    }
    ```
    """
    import time
    
    try:
        start_time = time.time()
        
        logger.info(
            f"üì® Batch request recibido: {len(request.orders)} pedidos, "
            f"{len(request.vehicles)} veh√≠culos, "
            f"fast_mode={request.fast_mode}"
        )
        
        # Validaciones
        if not request.orders:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="La lista de pedidos no puede estar vac√≠a"
            )
        
        if not request.vehicles:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="La lista de veh√≠culos no puede estar vac√≠a"
            )
        
        # Configuraci√≥n
        config = request.config or SystemConfig()
        
        # Resultados
        assignments = []
        assigned_count = 0
        unassigned_count = 0
        
        # Copiar lista de veh√≠culos para ir actualizando su carga
        available_vehicles = [v.model_copy(deep=True) for v in request.vehicles]
        
        # Procesar cada pedido
        for order in request.orders:
            order_start_time = time.time()
            
            logger.info(f"  üîç Procesando {order.id}...")
            
            # Validar que el pedido tenga coordenadas
            if not order.delivery_location:
                logger.warning(f"    ‚ö†Ô∏è  {order.id}: Sin coordenadas de entrega")
                assignments.append(BatchAssignmentResult(
                    order_id=order.id,
                    assigned_vehicle_id=None,
                    score=None,
                    assignment_time=time.time() - order_start_time,
                    reasons=["El pedido no tiene coordenadas de entrega"]
                ))
                unassigned_count += 1
                continue
            
            # Asignar usando modo correspondiente
            if request.fast_mode:
                # Modo FAST con pre-filtering
                scored_vehicles = scoring_engine.rank_vehicles_fast(
                    available_vehicles,
                    order,
                    config,
                    max_candidates=request.max_candidates_per_order
                )
            else:
                # Modo NORMAL (completo)
                scored_vehicles = scoring_engine.rank_vehicles(
                    available_vehicles,
                    order
                )
            
            # Procesar resultado
            if scored_vehicles and scored_vehicles[0][1] > 0:
                # Asignaci√≥n exitosa
                best_vehicle, best_score = scored_vehicles[0]
                
                # Actualizar veh√≠culo (agregar pedido a su carga)
                for vehicle in available_vehicles:
                    if vehicle.id == best_vehicle.id:
                        vehicle.current_orders.append(order)
                        vehicle.current_load += 1
                        total_weight = sum(item.weight_kg for item in order.items)
                        vehicle.current_weight_kg += total_weight
                        break
                
                assignments.append(BatchAssignmentResult(
                    order_id=order.id,
                    assigned_vehicle_id=best_vehicle.id,
                    score=best_score,
                    assignment_time=time.time() - order_start_time,
                    reasons=[
                        f"Mejor score: {best_score:.3f}",
                        f"Veh√≠culo: {best_vehicle.id}",
                        f"Modo: {'Fast' if request.fast_mode else 'Normal'}"
                    ]
                ))
                assigned_count += 1
                
                logger.info(
                    f"    ‚úì {order.id} -> {best_vehicle.id} "
                    f"(score: {best_score:.3f}, "
                    f"time: {time.time() - order_start_time:.2f}s)"
                )
            else:
                # No se pudo asignar
                assignments.append(BatchAssignmentResult(
                    order_id=order.id,
                    assigned_vehicle_id=None,
                    score=None,
                    assignment_time=time.time() - order_start_time,
                    reasons=["No hay veh√≠culos disponibles que cumplan requisitos"]
                ))
                unassigned_count += 1
                
                logger.warning(f"    ‚ö†Ô∏è  {order.id}: No asignado")
        
        # Preparar respuesta
        total_time = time.time() - start_time
        
        response = BatchAssignmentResponse(
            total_orders=len(request.orders),
            assigned=assigned_count,
            unassigned=unassigned_count,
            total_time=round(total_time, 2),
            fast_mode_used=request.fast_mode,
            assignments=assignments
        )
        
        logger.info(
            f"‚úÖ Batch completado: {assigned_count}/{len(request.orders)} asignados "
            f"en {total_time:.2f}s "
            f"(promedio: {total_time/len(request.orders):.2f}s/pedido)"
        )
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error en assign_orders_batch: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error procesando batch: {str(e)}"
        )


# ============================================================================
# ENTRY POINT
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    
    # Configuraci√≥n del servidor
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    debug = os.getenv("DEBUG", "True").lower() == "true"
    
    logger.info(f"üöÄ Iniciando servidor en {host}:{port}")
    
    uvicorn.run(
        "app.main:app",
        host=host,
        port=port,
        reload=debug,
        log_level="info"
    )

